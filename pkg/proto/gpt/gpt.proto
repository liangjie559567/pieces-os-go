syntax = "proto3";

package runtime.aot.machine_learning.parents.gpt;

option go_package = "pkg/proto/gpt";

service GPTInferenceService {
    rpc Predict (Request) returns (Response);
    rpc PredictWithStream (Request) returns (stream Response);
}

// Global
message Message {
  uint64 role = 1;  // value 0 for system, 1 for user/assistant
  string message = 2;
}

// Requests
message Request {
  string models = 1;    // model name
  repeated Message messages = 2;  // message list
  double temperature = 3;  // sampling temperature
  double top_p = 4;    // nucleus sampling
}

// Response
message Response {
  uint64 response_code = 2;  // response status code: 200, 439, etc. 204 for termination
  optional Body body = 4;
}

message Body {
  string id = 1;      // e.g. chatcmpl-ANcM3OsoLf6AXJpO76pDoW7Ry68oc
  string object = 2;  // e.g. chat.completion
  uint64 time = 3;    // UNIX timestamp
  MessageWarpper message_warpper = 4;
  Unknown unknown = 5;
}

message MessageWarpper {
  int64 arg1 = 1;     // possibly constant 1
  Message message = 2; // response message
}

message Unknown {
  int64 arg1 = 1;
  int64 arg2 = 2;
  int64 arg3 = 3;
}