// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pkg/proto/gpt/gpt.proto

package gpt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GPTInferenceService_Predict_FullMethodName           = "/runtime.aot.machine_learning.parents.gpt.GPTInferenceService/Predict"
	GPTInferenceService_PredictWithStream_FullMethodName = "/runtime.aot.machine_learning.parents.gpt.GPTInferenceService/PredictWithStream"
)

// GPTInferenceServiceClient is the client API for GPTInferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GPTInferenceServiceClient interface {
	Predict(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	PredictWithStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Response], error)
}

type gPTInferenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGPTInferenceServiceClient(cc grpc.ClientConnInterface) GPTInferenceServiceClient {
	return &gPTInferenceServiceClient{cc}
}

func (c *gPTInferenceServiceClient) Predict(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, GPTInferenceService_Predict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPTInferenceServiceClient) PredictWithStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GPTInferenceService_ServiceDesc.Streams[0], GPTInferenceService_PredictWithStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Request, Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GPTInferenceService_PredictWithStreamClient = grpc.ServerStreamingClient[Response]

// GPTInferenceServiceServer is the server API for GPTInferenceService service.
// All implementations must embed UnimplementedGPTInferenceServiceServer
// for forward compatibility.
type GPTInferenceServiceServer interface {
	Predict(context.Context, *Request) (*Response, error)
	PredictWithStream(*Request, grpc.ServerStreamingServer[Response]) error
	mustEmbedUnimplementedGPTInferenceServiceServer()
}

// UnimplementedGPTInferenceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGPTInferenceServiceServer struct{}

func (UnimplementedGPTInferenceServiceServer) Predict(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedGPTInferenceServiceServer) PredictWithStream(*Request, grpc.ServerStreamingServer[Response]) error {
	return status.Errorf(codes.Unimplemented, "method PredictWithStream not implemented")
}
func (UnimplementedGPTInferenceServiceServer) mustEmbedUnimplementedGPTInferenceServiceServer() {}
func (UnimplementedGPTInferenceServiceServer) testEmbeddedByValue()                             {}

// UnsafeGPTInferenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GPTInferenceServiceServer will
// result in compilation errors.
type UnsafeGPTInferenceServiceServer interface {
	mustEmbedUnimplementedGPTInferenceServiceServer()
}

func RegisterGPTInferenceServiceServer(s grpc.ServiceRegistrar, srv GPTInferenceServiceServer) {
	// If the following call pancis, it indicates UnimplementedGPTInferenceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GPTInferenceService_ServiceDesc, srv)
}

func _GPTInferenceService_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPTInferenceServiceServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPTInferenceService_Predict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPTInferenceServiceServer).Predict(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPTInferenceService_PredictWithStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GPTInferenceServiceServer).PredictWithStream(m, &grpc.GenericServerStream[Request, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GPTInferenceService_PredictWithStreamServer = grpc.ServerStreamingServer[Response]

// GPTInferenceService_ServiceDesc is the grpc.ServiceDesc for GPTInferenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GPTInferenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runtime.aot.machine_learning.parents.gpt.GPTInferenceService",
	HandlerType: (*GPTInferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _GPTInferenceService_Predict_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PredictWithStream",
			Handler:       _GPTInferenceService_PredictWithStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/gpt/gpt.proto",
}
