// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pkg/proto/vertex/vertex.proto

package vertex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VertexInferenceService_Predict_FullMethodName           = "/runtime.aot.machine_learning.parents.vertex.VertexInferenceService/Predict"
	VertexInferenceService_PredictWithStream_FullMethodName = "/runtime.aot.machine_learning.parents.vertex.VertexInferenceService/PredictWithStream"
)

// VertexInferenceServiceClient is the client API for VertexInferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VertexInferenceServiceClient interface {
	Predict(ctx context.Context, in *Requests, opts ...grpc.CallOption) (*Response, error)
	PredictWithStream(ctx context.Context, in *Requests, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Response], error)
}

type vertexInferenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVertexInferenceServiceClient(cc grpc.ClientConnInterface) VertexInferenceServiceClient {
	return &vertexInferenceServiceClient{cc}
}

func (c *vertexInferenceServiceClient) Predict(ctx context.Context, in *Requests, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, VertexInferenceService_Predict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vertexInferenceServiceClient) PredictWithStream(ctx context.Context, in *Requests, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VertexInferenceService_ServiceDesc.Streams[0], VertexInferenceService_PredictWithStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Requests, Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VertexInferenceService_PredictWithStreamClient = grpc.ServerStreamingClient[Response]

// VertexInferenceServiceServer is the server API for VertexInferenceService service.
// All implementations must embed UnimplementedVertexInferenceServiceServer
// for forward compatibility.
type VertexInferenceServiceServer interface {
	Predict(context.Context, *Requests) (*Response, error)
	PredictWithStream(*Requests, grpc.ServerStreamingServer[Response]) error
	mustEmbedUnimplementedVertexInferenceServiceServer()
}

// UnimplementedVertexInferenceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVertexInferenceServiceServer struct{}

func (UnimplementedVertexInferenceServiceServer) Predict(context.Context, *Requests) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedVertexInferenceServiceServer) PredictWithStream(*Requests, grpc.ServerStreamingServer[Response]) error {
	return status.Errorf(codes.Unimplemented, "method PredictWithStream not implemented")
}
func (UnimplementedVertexInferenceServiceServer) mustEmbedUnimplementedVertexInferenceServiceServer() {
}
func (UnimplementedVertexInferenceServiceServer) testEmbeddedByValue() {}

// UnsafeVertexInferenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VertexInferenceServiceServer will
// result in compilation errors.
type UnsafeVertexInferenceServiceServer interface {
	mustEmbedUnimplementedVertexInferenceServiceServer()
}

func RegisterVertexInferenceServiceServer(s grpc.ServiceRegistrar, srv VertexInferenceServiceServer) {
	// If the following call pancis, it indicates UnimplementedVertexInferenceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VertexInferenceService_ServiceDesc, srv)
}

func _VertexInferenceService_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Requests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VertexInferenceServiceServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VertexInferenceService_Predict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VertexInferenceServiceServer).Predict(ctx, req.(*Requests))
	}
	return interceptor(ctx, in, info, handler)
}

func _VertexInferenceService_PredictWithStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Requests)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VertexInferenceServiceServer).PredictWithStream(m, &grpc.GenericServerStream[Requests, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VertexInferenceService_PredictWithStreamServer = grpc.ServerStreamingServer[Response]

// VertexInferenceService_ServiceDesc is the grpc.ServiceDesc for VertexInferenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VertexInferenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runtime.aot.machine_learning.parents.vertex.VertexInferenceService",
	HandlerType: (*VertexInferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _VertexInferenceService_Predict_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PredictWithStream",
			Handler:       _VertexInferenceService_PredictWithStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/vertex/vertex.proto",
}
